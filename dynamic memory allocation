/*
=> malloc():
Syntax: malloc(n * m)
It is used to allocate memory for storing n elements of size m bytes each. It returns a void pointer.
Example:
int *ptr = (int*)malloc(n * sizeof(int));


=> realloc():
Syntax: realloc(ptr, new_size)
It is used to resize the previously allocated memory block pointed to by ptr to new_size bytes. If the new size is larger, the new area may not be initialized.
Example:
ptr = (int*)realloc(ptr, new_size * sizeof(int));

=> calloc():
Syntax: calloc(n, m)
It is used to allocate memory for an array of n elements each of size m bytes and initializes all bytes in the allocated storage to zero.
Example:
int *ptr = (int*)calloc(n, sizeof(int));

=>free():
Syntax: free(ptr)
It is used to deallocate the memory previously allocated by malloc(), realloc(), or calloc(). The pointer ptr must not be used after freeing the memory.
Example:
free(ptr);

*/
/*
#include <stdio.h>
#include <stdlib.h>
int main(){
	int n;
	printf("Enter the size: ");
	scanf("%d",&n);
	void *ptr;		//void *ptr is an empty / void pointer which don't have any datatype but can be called as any datatype. It can be typecasted into any datatype.
	
	ptr=&n;
	printf("%d\n",*((int*)ptr));	//it will give dereferencing 'void *' pointer so to avoid this, we will typecast void pointer so as to use it.
	malloc(n*sizeof(int));
	/*
	//example of type casting--
	float a=3.5;
	int b;
	b=(int)a;		//type casting a [float] to [int]
	printf("%d\n",b);
//type casting end


	return 0;
}


#include <stdio.h>
#include <stdlib.h>

int main(){
	int n;
	printf("Enter the size: ");
	scanf("%d",&n);
	void *ptr;		//void *ptr is an empty / void pointer which don't have any datatype but can be called as any datatype. It can be typecasted into any datatype.
	
	ptr=&n;
	printf("%d\n",*((int*)ptr));	//it will give dereferencing 'void *' pointer so to avoid this, we will typecast void pointer so as to use it.
	malloc(n*sizeof(int));
*/	
	
#include <stdio.h>
#include <stdlib.h>

int main(){
	int n;
	printf("Enter the size: ");
	scanf("%d",&n);
	struct employee* ptr=(struct employee*)malloc(n*sizeof(struct employee));
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
